<?php

/**
 * @file
 * Install and uninstall functions for the client_side_file_crypto module.
 */

/**
 * Implements hook_install().
 *
 * This hook will run upon installation of this module and will generate
 * multiple key requests, one per user per role that they are in.
 *
 * written to the database table created in hook_schema().
 *
 * @see hook_install()
 *
 * @ingroup client_side_file_crypto
 */
function client_side_file_crypto_install() {
  $users = \Drupal::entityManager()->getStorage('user')->loadMultiple();
  $values = [];
  foreach ($users as $user) {
    $roles = $user->getRoles();
    foreach ($roles as $role) {
      $values[] = [
        'accessKey' => '100',
        'roleName' => $role,
        'userID' => $user->id(),
        'needsKey' => 1,
      ];
    }
  }
  $query = db_insert('client_side_file_crypto_Keys')->fields([
    'accessKey',
    'roleName',
    'userID',
  ]
  );
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();
}

/**
 * Implements hook_schema().
 *
 * Defines the database tables used by this module.
 *
 * @see hook_schema()
 *
 * @ingroup client_side_file_crypto
 */
function client_side_file_crypto_schema() {
  $schema['client_side_file_crypto_Keys'] = [
    'description' => 'Stores all the access keys for the users',
    'fields' => [
      'keyIndex' => [
        'type' => 'serial',
        'not null' => TRUE,
        'description' => "Index ident for the keys",
      ],
      'accessKey' => [
        'type' => 'varchar',
        'length' => 300,
        'not null' => TRUE,
        'default' => '',
        'description' => "The access key that must be decrypted for data access",
      ],
      'userID' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => "The user ID of the key's owner",
      ],
      'roleName' => [
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'description' => "The Group name that this key is for",
      ],
      'salt' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
        'description' => 'Salt used if any',
      ],
      'needsKey' => [
        'type' => 'int',
        'default' => 1,
        'not null' => TRUE,
        'description' => 'Boolean determines if an access key is required.',
      ],
    ],
    'primary key' => ['keyIndex'],
    'indexes' => [
      'key_pub' => ['accessKey'],
      'group_key' => ['roleName'],
    ],
  ];

  $schema['client_side_file_crypto_files'] = [
    'description' => 'Stores all metadata for encrypted files',
    'fields' => [
      'fileIndex' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => "fileID identifier for the file metadata",
      ],
      'fileName' => [
        'type' => 'varchar',
        'length' => 100,
        'not null' => TRUE,
        'description' => "file name before encryption",
      ],
      'nodeID' => [
        'type' => 'int',
        'not null' => TRUE,
        'description' => "node ID of the node where the file is attached",
      ],
      'isImage' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Boolean value for if the file is an image or not.",
      ],
      'MIMEtype' => [
        'type' => 'varchar',
        'length' => 20,
        'not null' => FALSE,
        'description' => "MIME type for the file",
      ],
      'roleName' => [
        'type' => 'varchar',
        'length' => 20,
        'not null' => TRUE,
        'description' => "role name for which the file is encrypted",
      ],
      'pathToFile' => [
        'type' => 'varchar',
        'length' => 1000,
        'not null' => TRUE,
        'description' => "Path at which the file is stored",
      ],
    ],
    'primary key' => ['fileIndex'],
    'indexes' => [
      'file_name' => ['fileName'],
      'group_key' => ['roleName'],
    ],
  ];
  return $schema;
}
